let gridSize = 8;
let frameWidth = 8;
let frameHeight = 8;
let frames = "A64|A1B1C4B1A2D1C4D1A2D1C1E2C1D1A2B1D1E2D1B1A2B2D2B2A3B4A18|A39B1A5B3A4B3D1A4B2D1E1|B2A4B2A2B4A18B2A4B10D8C8|A32B2A4B10D8C8|A3B2D1C2A3B2D1C2A3B2D1E1C1A2B3D1E1C1B5D1E1C1B5D1E1C1D5E1C9E1|F9G3F2G1F2G3F5E3F7G3F5G3F5G3F5E3F2|A3H2A6H2A6G2A6H2A5B1H2B1A4D1I2D1A4B1D2B1A10|A1B1A7B1A6B1A7B1A7B1A7B1A8B1A7B1A6|A18B4A2B2A4B2A32|A3B2D1C2A3B2D1C2A4B1D1E1C1A4B1D1E1C1A4B1D1E1C1A4B1D1E1C1A3B2D1C2A3B2D1C2|F64|F17G2F6G2F6G2F2G2F2E2F2G2F6E2F9|G4F4G4F4E4F1G3E1G7E1G5E2F1G5E2F1E5F3E5F2|F9G5F3G5F3G5F3E5F3E3G3F5G3F5E3F1|A2I4A3I6A2I6A1I1A1I4A1I4E2I14E2I3G1I6G1|C2D1B2A3C2D1B2A3C1E1D1B1A4C1E1D1B1A4C1E1C1F2C1A2F8I16|A34C1F2C1A2F8I16|A3B2D1C2A3B2D1C2A4B1D1C2A4B1D1E1C1A4B2D1E1A4B3D1A5B3A6B2|C1F6C6E3C5E3C9E3C4D1E3D4B1D3B6A4B2|C2E4C30E3C1D4E3D1B4D3B3A4B2|C4F3C15E2C2E3C5E3C3D8B10A4B2|C6F2C7F1C18E2C4D5E1C2B4D2E1C1B5D1E1C1|G1D6G2D6G2D6G1H1D6H25G1H6G1|F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1G8H2I1G2I1H4I1H2I1H2|E24F2E4F2E8G8H2I1G2I1H4I1H2I1H2|E24F2E4F2E24F8|E3F1E3F1E3F1E3F1E7F1E7F1E7F1E7F1E3F1E3F1E3F1E3F1|J64|J1F1J7F1J11F1J7F1J1F1J7F1J7F3J1F1J5F1J1F1J4|F2J1F2J1F2J1F1J1F2J1F2J3F5J3F2J1F1J2F3J4F4J1F1J1F10J1F3J1F2|G1D6G2D6G2D6G1H1D2I2D2H4I2H6I2H11G1H6G1|F2E6F1E21F2E19F1E7F1E3F1|E5F3E6F2E7F3E5F1E7F1E7F1E3F1E3F1E3F1E3F1|F4H1G2H1F3H2G3F2H3G3F2H3G3F2H3G4F1I1H2G3F2I1H2G3F2I1H2G3|H1G2H1F4G3H2F3G3H3F2G3H3F2G3H3F1G4H2I1F1G4H2I1F1E1G3H2I1F2|D64|D6F1D7F4D6F2D6F1D5F1D13F2D5F3D2|F3D3F6D2F15D5F3D2F1D3F6D2F9D2F2|G1D6G1E1D6E12G2E6I2E3F1E2I2E2F17|E3F1E7F1E18F2E8F1E7F2E6F8|E3F1E3F1E3F1E3F1E7F3E5F1E7F1E6F2E5F11|F2H3G2H1F2H2I4G2H1I2E3G2I2E2G2E2I1E3I2F2I1E3I2F16|H1G2H3F2I4H2F2E3I2H1F2G2E2I2F2I2E3I1F2I2E3I1F18|F8E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F17E1F1E1F1E1F1E1F1E1F1E1F1E1F1E1F9|E1F7E2F1E2F2E3F2E1F2E1F2E1F3E1F1E1F4E2F1E1F11E3F2E2F1E2F2|$64|$64";
let palette = {"A":"#54769b","B":"#79a5b7","C":"#3a4e68","D":"#e0f8d5","E":"#7c816c","F":"#b5ae91","G":"#e0dab6","H":"#d4564a","I":"#5a473e","J":"#e6e56f"};

frames = frames.split('|');

let update = c => {
    let {pointer} = c.entities.input;
    if (pointer.justUp && !pointer.movedDown) {
        let cam = c.entities.camera.data;
        let x = Math.floor(
            (pointer.x - cam.x) / gridSize
        );
        let y = Math.floor(
            (pointer.y - cam.y) / gridSize
        );
        let posKey = '' + x + 'x' + y;
        let {data} = c.entity;
        if (data[posKey] !== undefined) {
            delete data[posKey];
        } else {
            data[posKey] = Math.floor(Math.random() * 48);
        }
        let {sound} = c.entity;
        sound.play = true;
    }
};

let draw = c => {
    let {ctx} = c;
    ctx.restore();
    ctx.save();
    let {zoom} = c.entities.viewport.resize;
    ctx.scale(zoom, zoom);
    let cam = c.entities.camera.data;
    ctx.translate(Math.floor(cam.x), Math.floor(cam.y));
    let {data} = c.entity;
    Object.keys(data).forEach(posKey => {
        let [x, y] = posKey.split('x');
        x = Number(x) * gridSize;
        y = Number(y) * gridSize;
        let frameData = frames[data[posKey]];
        frameData = frameData.replace(/(\D)(\d+)/g, (_, char, count) => char.repeat(count));
        [...frameData].forEach((c, i) => {
            let color = palette[c];
            if (color === undefined) {
                return;
            }
            let xb = i % gridSize;
            let yb = Math.floor(i / gridSize);
            ctx.fillStyle = color;
            ctx.fillRect(x + xb, y + yb, 1, 1);
        });
    });
};

export default Object.freeze({
    update,
    draw
});
